
# Cursor AI Project Rules - PHP/JavaScript Website Refactoring

## Project Overview
- **Legacy Website**: http://gukho.net/mp/
- **Technology Stack**: PHP backend, JavaScript frontend, SQLite/MySQL database
- **Main Features**: Learning tools, card slideshows, vocabulary management, news search, health tracking, CRUD operations
- **Goal**: Modern refactoring while maintaining functionality
- **Current Status**: âœ… Development Complete, Ready for Production Deployment

## ðŸŽ¯ Key Learnings & Best Practices

### Image Loading & External Services
- **External Image Services**: Use reliable services like Picsum Photos instead of via.placeholder.com
- **Error Handling**: Implement recursive retry logic for failed image loads
- **Fallback Strategy**: Always provide local image fallbacks for external service failures
- **Performance**: Preload critical images and implement lazy loading for large galleries
- **Network Issues**: Handle ERR_NAME_NOT_RESOLVED and timeout errors gracefully

### PHP & JavaScript Integration
- **Template Literals**: Avoid using JavaScript template literals directly in PHP strings
- **External JS Files**: Separate JavaScript logic into external files to avoid PHP escaping issues
- **Data Passing**: Use global JavaScript variables or data attributes for PHP-to-JS data transfer
- **Event Handling**: Implement proper error event handlers for dynamic content

### Database Management
- **SQLite Development**: Use SQLite for development, MySQL for production
- **Environment-based Config**: Implement credential loading based on environment
- **Migration Strategy**: Create proper database migration scripts
- **Connection Pooling**: Implement database connection management

## Code Standards & Architecture

### PHP Backend Rules
- Use **PHP 7.4+** features and syntax
- Follow **PSR-4 autoloading** and **PSR-12 coding standards**
- Implement **MVC pattern** with clear separation of concerns
- Use **prepared statements** for all database operations (prevent SQL injection)
- Implement proper **error handling** with try-catch blocks
- Use **type declarations** for function parameters and return types
- Create **service classes** for business logic separation
- Implement **dependency injection** where applicable
- **Environment-based Configuration**: Use separate config files for dev/prod

### JavaScript Frontend Rules
- Use **ES6+ syntax** (const/let, arrow functions, async/await)
- Implement **modular JavaScript** with import/export
- Use **fetch API** instead of XMLHttpRequest
- Implement **proper error handling** with try-catch for async operations
- Follow **functional programming** principles where possible
- Use **semantic HTML5** elements
- Implement **responsive design** with CSS Grid/Flexbox
- Add **accessibility attributes** (ARIA labels, alt texts, etc.)
- **Error Recovery**: Implement retry mechanisms for failed operations
- **Loading States**: Always show loading indicators for async operations

### Database & Security
- Use **environment variables** for sensitive configuration
- Implement **CSRF protection** for forms
- Add **input validation** and **sanitization**
- Use **password hashing** with PHP's password_hash()
- Implement **session management** with secure settings
- Add **rate limiting** for API endpoints
- Use **HTTPS** and secure headers
- **Credential Management**: Separate credential files from main codebase
- **Database Abstraction**: Support multiple database types (SQLite/MySQL)

### File Structure (Updated)
```
project/
â”œâ”€â”€ config/
â”‚   â”œâ”€â”€ credentials/
â”‚   â”‚   â”œâ”€â”€ development.php
â”‚   â”‚   â”œâ”€â”€ production.php
â”‚   â”‚   â””â”€â”€ loader.php
â”‚   â”œâ”€â”€ database.php
â”‚   â””â”€â”€ app.php
â”œâ”€â”€ modules/
â”‚   â”œâ”€â”€ learning/
â”‚   â”‚   â”œâ”€â”€ card/
â”‚   â”‚   â”‚   â”œâ”€â”€ components/
â”‚   â”‚   â”‚   â”œâ”€â”€ css/
â”‚   â”‚   â”‚   â”œâ”€â”€ js/
â”‚   â”‚   â”‚   â””â”€â”€ images/
â”‚   â”‚   â”œâ”€â”€ voca/
â”‚   â”‚   â””â”€â”€ inst/
â”‚   â”œâ”€â”€ tools/
â”‚   â”‚   â”œâ”€â”€ news/
â”‚   â”‚   â”œâ”€â”€ tour/
â”‚   â”‚   â””â”€â”€ box/
â”‚   â””â”€â”€ management/
â”‚       â”œâ”€â”€ crud/
â”‚       â””â”€â”€ myhealth/
â”œâ”€â”€ system/
â”‚   â”œâ”€â”€ controllers/
â”‚   â”œâ”€â”€ models/
â”‚   â”œâ”€â”€ includes/
â”‚   â”œâ”€â”€ middleware/
â”‚   â””â”€â”€ views/
â”œâ”€â”€ public/
â”‚   â”œâ”€â”€ assets/
â”‚   â”‚   â”œâ”€â”€ css/
â”‚   â”‚   â”œâ”€â”€ js/
â”‚   â”‚   â””â”€â”€ images/
â”‚   â””â”€â”€ index.php
â”œâ”€â”€ scripts/
â”‚   â”œâ”€â”€ deploy.php
â”‚   â””â”€â”€ quick_deploy.php
â”œâ”€â”€ tests/
â””â”€â”€ docs/
```

## Specific Refactoring Guidelines

### Learning Module (Card Slideshow, Word Cards, Vocabulary)
- Create `LearningController` class
- Implement `CardService` for card management
- Use **JSON API responses** for AJAX operations
- Add **progressive enhancement** for JavaScript features
- Implement **local storage** for offline functionality
- Add **keyboard navigation** support
- **Image Management**: Handle 140+ images with proper error handling
- **Slideshow Controls**: Implement play/pause, speed control, auto-play
- **Touch Support**: Add swipe gestures for mobile devices

### Tools Module (News Search, Family Tour, Box Breathing)
- Create separate controller for each tool
- Implement **API rate limiting** for external news API
- Use **async/await** for all API calls
- Add **loading states** and **error handling** in UI
- Implement **caching** for news search results
- **External APIs**: Handle API failures gracefully with fallback content
- **Real-time Features**: Implement live search and dynamic content updates

### Management Module (CRUD Demo, My Health)
- Use **RESTful API design** (GET, POST, PUT, DELETE)
- Implement **data validation** on both client and server
- Add **pagination** for large datasets
- Use **modal dialogs** for CRUD operations
- Implement **confirmation dialogs** for delete operations
- **Data Export**: Support CSV/JSON export functionality
- **Search & Filter**: Implement advanced search and filtering

### Authentication & Security
- Implement **JWT tokens** for API authentication
- Add **2FA support** (optional enhancement)
- Use **bcrypt** for password hashing
- Implement **password reset** functionality
- Add **login attempt limiting**
- **Session Security**: Implement secure session management
- **Role-based Access**: Implement user role and permission system

## Performance Optimization

### Frontend Performance
- **Minify and compress** CSS/JavaScript files
- Implement **lazy loading** for images
- Use **critical CSS** for above-the-fold content
- Add **service worker** for caching
- Optimize images with **WebP format**
- Use **CDN** for static assets
- **Image Optimization**: Compress and optimize all images
- **Bundle Optimization**: Minimize JavaScript bundle size

### Backend Performance
- Implement **database connection pooling**
- Add **query optimization** and indexing
- Use **caching layers** (Redis/Memcached)
- Implement **gzip compression**
- Add **database query logging** for optimization
- **File Caching**: Implement smart caching for static assets
- **Database Indexing**: Optimize database queries with proper indexes

## Code Quality & Testing

### Code Quality Rules
- **Maximum function length**: 20 lines
- **Maximum file length**: 200 lines
- Use **meaningful variable names** (no abbreviations)
- Add **PHPDoc comments** for all functions
- Implement **unit tests** for critical functions
- Use **linting tools** (PHP CS Fixer, ESLint)
- **Error Handling**: Always implement proper error handling
- **Code Documentation**: Document complex logic and business rules

### Testing Requirements
- **Unit tests** for all service classes
- **Integration tests** for API endpoints
- **Frontend tests** for critical user flows
- **Database tests** with test fixtures
- **Minimum 80% code coverage**
- **Cross-browser Testing**: Test on multiple browsers and devices
- **Performance Testing**: Monitor page load times and resource usage

## Documentation & Maintenance

### Documentation Requirements
- **API documentation** with request/response examples
- **Database schema** documentation
- **Setup and deployment** instructions
- **Code comments** for complex logic
- **Changelog** for version tracking
- **Deployment Guides**: Comprehensive deployment documentation
- **Troubleshooting Guides**: Common issues and solutions

### Git Workflow
- Use **feature branches** for all changes
- **Commit messages** in conventional format
- **Pull request reviews** required
- **Automated testing** on push
- **Semantic versioning** for releases
- **Deployment Automation**: Use GitHub Actions for CI/CD

## Browser Support & Compatibility
- Support **modern browsers** (Chrome 90+, Firefox 88+, Safari 14+, Edge 90+)
- **Progressive enhancement** for older browsers
- **Mobile-first** responsive design
- **Cross-browser testing** required
- **Touch Device Support**: Ensure proper touch interaction
- **Accessibility**: WCAG 2.1 Level AA compliance

## Deployment & DevOps

### Deployment Strategy
- **Environment Management**: Separate dev/staging/production environments
- **Database Migration**: Automated database schema updates
- **Backup Strategy**: Regular automated backups
- **Rollback Plan**: Quick rollback procedures
- **Monitoring**: Real-time monitoring and alerting

### Cafe24 Hosting Specific
- **FTP Deployment**: Automated FTP deployment scripts
- **File Permissions**: Proper file and directory permissions
- **Database Configuration**: MySQL database setup
- **SSL Certificate**: HTTPS enforcement
- **Performance Optimization**: Hosting-specific optimizations

## Specific Feature Enhancements

### Card Slideshow
- Add **touch/swipe gestures** for mobile
- Implement **auto-play** with pause on hover
- Add **keyboard shortcuts** (arrow keys, space)
- Support **multiple card sets**
- **Error Recovery**: Skip failed images and continue slideshow
- **Performance**: Optimize image loading and caching

### Vocabulary Management
- Add **spaced repetition** algorithm
- Implement **progress tracking**
- Support **multiple languages**
- Add **export/import** functionality
- **Search & Filter**: Advanced vocabulary search
- **Learning Analytics**: Track learning progress

### News Search
- Implement **search filters** (date, source, category)
- Add **search history**
- Support **bookmarking** articles
- Implement **real-time search suggestions**
- **API Integration**: Reliable external news API integration
- **Caching**: Cache search results for better performance

### Health Tracking
- Add **data visualization** with charts
- Implement **goal setting** and tracking
- Support **data export** (CSV, JSON)
- Add **reminder notifications**
- **Privacy**: Secure health data storage
- **Analytics**: Health trend analysis

## Error Handling & Logging

### Error Handling Rules
- **Never expose** sensitive information in error messages
- Use **custom exception classes** for different error types
- Implement **graceful degradation** for JavaScript errors
- Add **user-friendly error pages**
- Log all errors with **context information**
- **Recovery Mechanisms**: Implement automatic recovery where possible
- **User Feedback**: Provide clear error messages to users

### Logging Requirements
- **Separate log files** for different components
- **Rotation policies** for log files
- **Structured logging** with JSON format
- **Performance metrics** logging
- **Security event** logging
- **Error Tracking**: Monitor and alert on critical errors
- **Audit Trail**: Log all user actions for security

## Accessibility & UX

### Accessibility Requirements
- **WCAG 2.1 Level AA** compliance
- **Screen reader** compatibility
- **Keyboard navigation** support
- **High contrast** mode support
- **Focus indicators** for all interactive elements
- **Alt Text**: Proper alt text for all images
- **ARIA Labels**: Semantic HTML with ARIA attributes

### UX Improvements
- **Loading states** for all async operations
- **Success/error notifications** for user actions
- **Breadcrumb navigation**
- **Search functionality** across modules
- **Dark/light theme** toggle
- **Responsive Design**: Mobile-first approach
- **Performance**: Fast page load times

## Migration Strategy

### Phase 1: Foundation âœ… COMPLETED
1. âœ… Set up new project structure
2. âœ… Migrate database schema
3. âœ… Implement basic routing
4. âœ… Set up authentication system

### Phase 2: Core Features âœ… COMPLETED
1. âœ… Refactor learning modules
2. âœ… Implement tools functionality
3. âœ… Build management interface
4. âœ… Add API endpoints

### Phase 3: Enhancement âœ… COMPLETED
1. âœ… Add advanced features
2. âœ… Implement performance optimizations
3. âœ… Complete testing suite
4. âœ… Deploy to production

### Phase 4: Production Deployment ðŸš€ CURRENT
1. ðŸ”„ Final testing and validation
2. ðŸ”„ Production deployment
3. ðŸ”„ Post-deployment monitoring
4. ðŸ”„ User feedback collection

## Code Review Checklist
- [ ] Follows PSR-12 coding standards
- [ ] Includes proper error handling
- [ ] Has security measures implemented
- [ ] Includes unit tests
- [ ] Documentation is updated
- [ ] Performance considerations addressed
- [ ] Accessibility requirements met
- [ ] Cross-browser compatibility tested
- [ ] Image loading error handling implemented
- [ ] External API error handling implemented
- [ ] Mobile responsiveness verified
- [ ] Database migration tested

## ðŸš¨ Critical Issues & Solutions

### Image Loading Issues
- **Problem**: External image services failing
- **Solution**: Use reliable services (Picsum Photos) + local fallbacks
- **Implementation**: Recursive retry logic with error handling

### PHP-JavaScript Integration
- **Problem**: Template literal syntax errors in PHP
- **Solution**: Separate JavaScript into external files
- **Implementation**: Use global variables for data passing

### Database Configuration
- **Problem**: Environment-specific database settings
- **Solution**: Environment-based credential loading
- **Implementation**: Separate config files for dev/prod

### Deployment Automation
- **Problem**: Manual deployment process
- **Solution**: Automated FTP deployment scripts
- **Implementation**: PHP scripts for Cafe24 hosting

## ðŸ“Š Performance Metrics

### Target Performance
- **Page Load Time**: < 2 seconds
- **Image Load Time**: < 1 second per image
- **Database Query Time**: < 100ms
- **Mobile Performance**: 90+ Lighthouse score
- **Accessibility Score**: 100% WCAG compliance

### Monitoring
- **Real-time Monitoring**: Page load times, error rates
- **User Analytics**: Feature usage, user behavior
- **Performance Alerts**: Automatic alerts for performance issues
- **Error Tracking**: Monitor and resolve errors quickly

---

**Remember**: Always prioritize security, performance, and maintainability over quick fixes. Each component should be thoroughly tested before deployment. Learn from past issues and implement robust error handling and recovery mechanisms.
---

**Remember**: Always prioritize security, performance, and maintainability over quick fixes. Each component should be thoroughly tested before deployment.