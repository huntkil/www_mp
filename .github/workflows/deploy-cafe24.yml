name: Deploy to Cafe24

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # 코드 품질 검사
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, sqlite3

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Run Code Quality Check
        run: php scripts/code_quality_check.php

  # 테스트 실행
  test:
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, sqlite3

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Create test database
        run: |
          mkdir -p tests/database
          touch tests/database/test.sqlite

      - name: Run tests
        run: php scripts/test_suite.php

  # 보안 검사
  security:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Run PHP Security Checker
        run: |
          if [ -f "vendor/bin/security-checker" ]; then
            vendor/bin/security-checker security:check composer.lock || echo "Security check skipped"
          else
            echo "Security Checker not available, skipping security check"
          fi

  # 배포 패키지 생성
  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      - name: Install dependencies
        run: composer install --prefer-dist --no-dev --optimize-autoloader

      - name: Create production config
        run: |
          # 프로덕션 설정 파일 생성
          cp system/includes/config.php system/includes/config.prod.php
          sed -i 's/development/production/g' system/includes/config.prod.php
          sed -i 's/APP_DEBUG.*true/APP_DEBUG", false/g' system/includes/config.prod.php

      - name: Remove development files
        run: |
          # 개발용 파일 제거
          rm -f db_check.php
          rm -f db_setup.php
          rm -f debug.php
          rm -f test.php
          rm -rf tests/
          rm -rf .github/
          rm -f composer.*
          rm -f phpunit.xml
          rm -f *.md
          rm -rf .cursor/

      - name: Create deployment package
        run: |
          # 배포용 압축 파일 생성 (더 안정적인 방법)
          echo "Creating deployment package..."
          
          # 임시 디렉토리 생성
          mkdir -p temp-deploy
          
          # 필요한 파일들만 복사 (오류 처리 포함)
          for dir in system modules resources api scripts config lib docs; do
            if [ -d "$dir" ]; then
              echo "Copying $dir..."
              cp -r "$dir" temp-deploy/ || echo "Warning: Failed to copy $dir"
            fi
          done
          
          # 개별 파일 복사
          for file in index.php favicon.ico LICENSE; do
            if [ -f "$file" ]; then
              echo "Copying $file..."
              cp "$file" temp-deploy/ || echo "Warning: Failed to copy $file"
            fi
          done
          
          # 개발용 파일 제거
          echo "Removing development files..."
          rm -f temp-deploy/db_check.php
          rm -f temp-deploy/db_setup.php
          rm -f temp-deploy/debug.php
          rm -f temp-deploy/test.php
          rm -rf temp-deploy/tests/
          rm -rf temp-deploy/.github/
          rm -f temp-deploy/composer.*
          rm -f temp-deploy/phpunit.xml
          rm -f temp-deploy/*.md
          rm -rf temp-deploy/.cursor/
          
          # 압축 파일 생성
          echo "Creating tar.gz file..."
          cd temp-deploy
          tar -czf ../mp-deployment.tar.gz . || {
            echo "Error: Failed to create tar.gz file"
            exit 1
          }
          cd ..
          
          # 임시 디렉토리 정리
          rm -rf temp-deploy
          
          echo "Deployment package created successfully"
          ls -la mp-deployment.tar.gz
          
          # 파일 크기 확인
          if [ -f "mp-deployment.tar.gz" ]; then
            size=$(stat -c%s mp-deployment.tar.gz 2>/dev/null || stat -f%z mp-deployment.tar.gz 2>/dev/null || echo "unknown")
            echo "Package size: $size bytes"
          else
            echo "Error: Package file not created"
            exit 1
          fi

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: mp-deployment
          path: mp-deployment.tar.gz

  # Cafe24 FTP 배포
  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      - name: Install dependencies
        run: composer install --prefer-dist --no-dev --optimize-autoloader

      - name: Create production config
        run: |
          # 프로덕션 설정 파일 생성
          cp system/includes/config.php system/includes/config.prod.php
          sed -i 's/development/production/g' system/includes/config.prod.php
          sed -i 's/APP_DEBUG.*true/APP_DEBUG", false/g' system/includes/config.prod.php

      - name: Remove development files
        run: |
          # 개발용 파일 제거
          rm -f db_check.php
          rm -f db_setup.php
          rm -f debug.php
          rm -f test.php
          rm -rf tests/
          rm -rf .github/
          rm -f composer.*
          rm -f phpunit.xml
          rm -f *.md
          rm -rf .cursor/

      - name: Deploy to Cafe24 via FTP
        run: |
          echo "🚀 Cafe24 FTP 배포 시작..."
          
          # FTP 연결 정보
          FTP_SERVER="${{ secrets.CAFE24_FTP_SERVER }}"
          FTP_USERNAME="${{ secrets.CAFE24_FTP_USERNAME }}"
          FTP_PASSWORD="${{ secrets.CAFE24_FTP_PASSWORD }}"
          REMOTE_DIR="/www/mp/"
          
          # lftp를 사용한 배포 (더 안정적)
          if command -v lftp &> /dev/null; then
            echo "📡 lftp를 사용하여 배포 중..."
            
            # 배포 스크립트 생성
            cat > deploy_script.lftp << EOF
            open -u $FTP_USERNAME,$FTP_PASSWORD $FTP_SERVER
            cd $REMOTE_DIR
            mirror --reverse --delete --verbose --exclude .git/ --exclude .github/ --exclude tests/ --exclude *.md --exclude composer.* --exclude *.tar.gz --exclude temp-deploy/ --exclude .cursor/ --exclude db_check.php --exclude db_setup.php --exclude debug.php --exclude test.php . .
            bye
            EOF
            
            lftp -f deploy_script.lftp
            
          else
            echo "📡 curl을 사용하여 배포 중..."
            
            # 주요 파일들만 업로드
            for file in index.php health.php favicon.ico LICENSE; do
              if [ -f "$file" ]; then
                echo "업로드 중: $file"
                curl -T "$file" "ftp://$FTP_SERVER$REMOTE_DIR$file" --user "$FTP_USERNAME:$FTP_PASSWORD"
              fi
            done
            
            # system 디렉토리 업로드
            if [ -d "system" ]; then
              echo "system 디렉토리 업로드 중..."
              find system -type f -exec curl -T {} "ftp://$FTP_SERVER$REMOTE_DIR{}" --user "$FTP_USERNAME:$FTP_PASSWORD" \;
            fi
            
            # modules 디렉토리 업로드
            if [ -d "modules" ]; then
              echo "modules 디렉토리 업로드 중..."
              find modules -type f -exec curl -T {} "ftp://$FTP_SERVER$REMOTE_DIR{}" --user "$FTP_USERNAME:$FTP_PASSWORD" \;
            fi
          fi
          
          echo "✅ 배포 완료!"

      - name: Post-deployment health check
        run: |
          echo "Waiting for deployment to complete..."
          sleep 30
          
          # 헬스 체크 (선택사항)
          curl -f http://gukho.net/mp/health.php || echo "Health check failed, but deployment may still be successful"

      - name: Send deployment notification
        run: |
          echo "🚀 Deployment completed successfully!"
          echo "🌐 Site URL: http://gukho.net/mp/"
          echo "📊 Health Check: http://gukho.net/mp/health.php" 